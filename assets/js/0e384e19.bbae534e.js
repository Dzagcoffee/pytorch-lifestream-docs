"use strict";(self.webpackChunkptls_docs=self.webpackChunkptls_docs||[]).push([[671],{9881:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),i=(a(7294),a(3905));const l={sidebar_position:1,title:"Welcome to PTLS"},r="Welcome to pytorch-lifestream",o={unversionedId:"intro",id:"intro",title:"Welcome to PTLS",description:"Library content",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/pytorch-lifestream-docs/docs/intro",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Welcome to PTLS"},sidebar:"sidebar"},p={},s=[{value:"Library content",id:"library-content",level:2},{value:"Library modules:",id:"library-modules",level:3},{value:"How to guide",id:"how-to-guide",level:2},{value:"How to create your own components",id:"how-to-create-your-own-components",level:2}],m={toc:s},d="wrapper";function k(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"welcome-to-pytorch-lifestream"},"Welcome to pytorch-lifestream"),(0,i.kt)("h2",{id:"library-content"},"Library content"),(0,i.kt)("p",null,"Here is a brief overview of library with links to the detailed descriptions"),(0,i.kt)("h3",{id:"library-modules"},"Library modules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ptls.preprocessing")," - transforms data to ",(0,i.kt)("inlineCode",{parentName:"p"},"ptls"),"-compatible format with ",(0,i.kt)("inlineCode",{parentName:"p"},"pandas")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"pyspark"),". Categorical encoding, datetime transformation, numerical feature preprocessing.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ptls.data_load")," - all that you need for prepare your data to training and validation."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.datasets")," - PyTorch ",(0,i.kt)("inlineCode",{parentName:"li"},"Dataset")," API implementation for data access."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.iterable_processing")," - generator-style filters for data transformation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.augmentations")," - functions for data augmentation."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ptls.frames")," - tools for training encoders with popular frameworks like CoLES, SimCLR, CPC, VICReg, ..."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames.coles")," - Contrastive leaning on sub-sequences."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames.cpc")," - Contrastive learning for future event state prediction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames.bert")," - methods, inspired by NLP and transformer models."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.framed.supervised")," - modules fo supervised training."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames.inference")," - inference module."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ptls.nn")," - layers for model creation:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.trx_encoder")," - layers to produce the representation for a single transactions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.seq_encoder")," - layers for sequence processing, like ",(0,i.kt)("inlineCode",{parentName:"li"},"RNN")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"Transformer"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.pb")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"PaddedBatch")," compatible layers, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"torch.nn")," modules, but works with ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls-data"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.head")," - composite layers for final embedding transformation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.seq_step.py")," - change the sequence along the time axis."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.binarization"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn.normalization")," - other groups of layers.")))),(0,i.kt)("h2",{id:"how-to-guide"},"How to guide"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Prepare your data."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Pyspark")," in local or cluster mode for big dataset and ",(0,i.kt)("inlineCode",{parentName:"li"},"Pandas")," for small."),(0,i.kt)("li",{parentName:"ul"},"Split data into required parts (train, valid, test, ...)."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.preprocessing")," for simple data preparation."),(0,i.kt)("li",{parentName:"ul"},"Transform features to compatible format using ",(0,i.kt)("inlineCode",{parentName:"li"},"Pyspark")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Pandas")," functions. You can also use ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.preprocessing")," for common data transformation patterns."),(0,i.kt)("li",{parentName:"ul"},"Split sequences to ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls-data")," format with ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.split_tools"),". Save prepared data into ",(0,i.kt)("inlineCode",{parentName:"li"},"Parquet")," format or keep it in memory (",(0,i.kt)("inlineCode",{parentName:"li"},"Pickle")," also works)."),(0,i.kt)("li",{parentName:"ul"},"Use one of the available ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.datasets")," to define input for the models."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Choose framework for encoder train."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"There are both supervised of unsupervised frameworks in ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames"),"."),(0,i.kt)("li",{parentName:"ul"},"Keep in mind that each framework requires his own batch format. Tools for batch collate can be found in the selected framework package."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Build encoder."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"All parts are available in ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn"),"."),(0,i.kt)("li",{parentName:"ul"},"You can also use pretrained layers."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Train your encoder with selected framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"pytorch_lightning"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Provide data with one of the DataLoaders that is compatible with selected framework."),(0,i.kt)("li",{parentName:"ul"},"Monitor the progress on tensorboard."),(0,i.kt)("li",{parentName:"ul"},"Optionally tune hyperparameters."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Save trained encoder for future use."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can use it as single solution (e.g. get class label probabilities)."),(0,i.kt)("li",{parentName:"ul"},"Or it can be a pretrained part of other neural network."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use encoder in your project."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Run predict for your data and get logits, probas, scores or embeddings."),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load.datasets")," tools to keep your data transformation and collect batches for inference.")))),(0,i.kt)("h2",{id:"how-to-create-your-own-components"},"How to create your own components"),(0,i.kt)("p",null,"It is possible create specific component for every library modules. Here are the links to the detailed description:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.data_load")," - new data processing tools and datasets for new types of data. ",(0,i.kt)("a",{parentName:"li",href:"https://dllllb.github.io/pytorch-lifestream/#"},"Link TBD")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ptls.frames")," - new modules which train network for specific problems. ",(0,i.kt)("a",{parentName:"li",href:"https://dllllb.github.io/pytorch-lifestream/#"},"Link TBD")),(0,i.kt)("li",{parentName:"ul"},"New layers for ",(0,i.kt)("inlineCode",{parentName:"li"},"ptls.nn"),". ",(0,i.kt)("a",{parentName:"li",href:"https://dllllb.github.io/pytorch-lifestream/#"},"Link TBD"))))}k.isMDXComponent=!0}}]);